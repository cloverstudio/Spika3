// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int      @id @default(autoincrement()) @map(name: "id")
  emailAddress          String?  @unique @map(name: "email_address")
  telephoneNumber       String?  @unique @map(name: "telephone_number")
  telephoneNumberHashed String?  @unique @map(name: "telephone_number_hashed")
  displayName           String?  @map(name: "display_name")
  avatarFileId          Int      @default(0) @map(name: "avatar_file_id")
  verificationCode      String?  @map(name: "verification_code")
  verified              Boolean  @default(false) @map(name: "verified")
  isBot                 Boolean  @default(false) @map(name: "is_bot")
  apiKey                String?  @map(name: "api_key")
  webhookUrl            String?  @map(name: "webhook_url") @db.VarChar(256)
  createdAt             DateTime @default(now()) @map(name: "created_at")
  modifiedAt            DateTime @default(now()) @map(name: "modified_at")
  deleted               Boolean  @default(false) @map(name: "deleted")

  rooms           RoomUser[]
  device          Device[]
  contacts        Contact[]       @relation("user")
  contactee       Contact[]       @relation("contact")
  messages        Message[]
  messagesRecords MessageRecord[]
  callHistory     CallHistory[]
  userSetting     UserSetting[]
  blocks          Block[]         @relation("blocks")
  blockedBy       Block[]         @relation("blockedBy")

  @@index([displayName])
  @@map(name: "user")
}

model Block {
  id        Int      @id @default(autoincrement()) @map(name: "id")
  createdAt DateTime @default(now()) @map(name: "createdn_at")

  userId Int  @map(name: "user_id")
  user   User @relation(name: "blocks", fields: [userId], references: [id])

  blockedId Int  @map(name: "blocked_id")
  blocked   User @relation(name: "blockedBy", fields: [blockedId], references: [id])

  @@map(name: "block")
}

model Device {
  id             Int       @id @default(autoincrement()) @map(name: "id")
  userId         Int       @map(name: "user_id")
  user           User      @relation(fields: [userId], references: [id])
  deviceId       String    @unique @map(name: "device_id")
  type           String?   @map(name: "type")
  deviceName     String?   @map(name: "device_name")
  osName         String?   @map(name: "os_name")
  osVersion      String?   @map(name: "os_version")
  appVersion     String?   @map(name: "app_version")
  token          String?   @map(name: "token")
  pushToken      String?   @map(name: "push_token")
  tokenExpiredAt DateTime? @map(name: "token_expired_at")
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  modifiedAt     DateTime  @default(now()) @map(name: "modified_at")

  messages Message[]

  @@index([token])
  @@map(name: "device")
}

model File {
  id         Int    @id @default(autoincrement()) @map(name: "id")
  type       String @map(name: "type")
  relationId Int?   @map(name: "relation_id")
  path       String @map(name: "path")
  mimeType   String @map(name: "mime_type")
  fileName   String @map(name: "file_name")
  size       Float  @map(name: "size")
  clientId   String @unique @map(name: "client_id")
  metaData   Json   @default("{}") @map(name: "meta_data")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@map(name: "file")
}

model Contact {
  id              Int      @id @default(autoincrement()) @map(name: "id")
  userId          Int
  user            User     @relation("user", fields: [userId], references: [id])
  contactId       Int
  contact         User     @relation("contact", fields: [contactId], references: [id])
  createdAt       DateTime @default(now()) @map(name: "created_at")
  modifiedAt      DateTime @default(now()) @map(name: "modified_at")
  lastConfirmedAt DateTime @default(now()) @map(name: "last_confirmed_at")

  @@map(name: "contact")
}

model Room {
  id           Int      @id @default(autoincrement()) @map(name: "id")
  type         String   @map(name: "type")
  name         String   @map(name: "name")
  avatarFileId Int      @default(0) @map(name: "avatar_file_id")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  modifiedAt   DateTime @default(now()) @map(name: "modified_at")
  deleted      Boolean  @default(false) @map(name: "deleted")

  users       RoomUser[]
  messages    Message[]
  callHistory CallHistory[]
  webhooks    Webhook[]
  apiKeys     ApiKey[]

  @@map(name: "room")
}

model RoomUser {
  id         Int      @id @default(autoincrement()) @map(name: "id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map(name: "user_id")
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int      @map(name: "room_id")
  isAdmin    Boolean  @default(false) @map(name: "is_admin")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@map(name: "room_user")
}

model Message {
  id         Int  @id @default(autoincrement()) @map(name: "id")
  fromUserId Int  @map(name: "from_user_id")
  fromUser   User @relation(fields: [fromUserId], references: [id])

  fromDeviceId Int?    @map(name: "from_device_id")
  fromDevice   Device? @relation(fields: [fromDeviceId], references: [id])

  roomId Int  @map(name: "room_id")
  room   Room @relation(fields: [roomId], references: [id])

  type           String @map(name: "type")
  seenCount      Int    @default(0) @map(name: "seen_count")
  deliveredCount Int    @default(0) @map(name: "delivered_count")
  totalUserCount Int    @map(name: "total_user_count")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")
  deleted    Boolean  @default(false) @map(name: "deleted")
  replyId    Int?     @map(name: "reply_id")

  deviceMessages DeviceMessage[]
  messageRecords MessageRecord[]

  localId String? @map(name: "local_id")

  @@index([roomId, createdAt(sort: Desc)])
  @@map(name: "message")
}

model DeviceMessage {
  id           Int  @id @default(autoincrement()) @map(name: "id")
  deviceId     Int  @map(name: "device_id")
  userId       Int  @map(name: "user_id")
  fromUserId   Int  @map(name: "from_user_id")
  fromDeviceId Int? @map(name: "from_device_id")

  messageId Int     @map(name: "message_id")
  message   Message @relation(fields: [messageId], references: [id])

  body   Json   @map(name: "body")
  action String @map(name: "action")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")
  deleted    Boolean  @default(false) @map(name: "deleted")

  @@index([deviceId, userId, messageId])
  @@map(name: "message_device")
}

model MessageRecord {
  id        Int     @id @default(autoincrement()) @map(name: "id")
  messageId Int     @map(name: "message_id")
  message   Message @relation(fields: [messageId], references: [id])

  userId Int  @map(name: "user_id")
  user   User @relation(fields: [userId], references: [id])

  type     String  @map("string")
  reaction String? @map("reaction")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  isDeleted Boolean @default(false) @map(name: "deleted")

  @@unique([messageId, userId, type], name: "messageId_userId_type_unique_constraint")
  @@map(name: "message_record")
}

model Note {
  id      Int    @id @default(autoincrement()) @map(name: "id")
  roomId  Int    @map(name: "room_id")
  content String @map("content") @db.Text
  title   String @default("") @map("title")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@map(name: "note")
}

model CallSession {
  id         Int       @id @default(autoincrement()) @map(name: "id")
  roomId     Int       @map(name: "room_id")
  isActive   Boolean   @default(false) @map(name: "is_active")
  staredAt   DateTime  @default(now()) @map(name: "starte_at")
  finishedAt DateTime? @map(name: "finished_at")

  @@map(name: "call_session")
}

model CallHistory {
  id Int @id @default(autoincrement()) @map(name: "id")

  room   Room @relation(fields: [roomId], references: [id])
  roomId Int  @map(name: "room_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map(name: "user_id")

  sessionId   Int       @map(name: "call_session")
  isActive    Boolean   @default(false) @map(name: "is_active")
  isInitiator Boolean   @default(false) @map(name: "is_initiator")
  joinedAt    DateTime  @default(now()) @map(name: "joined_at")
  leftAt      DateTime? @map(name: "left_at")

  callParameters Json?

  @@map(name: "call_history")
}

model UserSetting {
  id Int @id @default(autoincrement()) @map(name: "id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map(name: "user_id")

  key   String @map(name: "key")
  value String @map(name: "value")

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@unique([userId, key], name: "userId_key_unique_constraint")
  @@map(name: "user_setting")
}

model Webhook {
  id              Int    @id @default(autoincrement()) @map(name: "id")
  verifySignature String @default("") @map("verify_signature")
  url             String @default("") @map("url")

  roomId Int  @map(name: "room_id")
  room   Room @relation(fields: [roomId], references: [id])

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@map(name: "webhook")
}

model ApiKey {
  id    Int    @id @default(autoincrement()) @map(name: "id")
  token String @map("token")

  userId Int  @map(name: "user_id")
  roomId Int  @map(name: "room_id")
  room   Room @relation(fields: [roomId], references: [id])

  createdAt  DateTime @default(now()) @map(name: "created_at")
  modifiedAt DateTime @default(now()) @map(name: "modified_at")

  @@map(name: "api_key")
}

generator dbml {
  provider = "prisma-dbml-generator"
}
